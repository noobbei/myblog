<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微信公众号开发(Python)[5]</title>
    <link href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/"/>
    <url>/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/</url>
    
    <content type="html"><![CDATA[<h1 id="微信网页授权获取用户openId"><a href="#微信网页授权获取用户openId" class="headerlink" title="微信网页授权获取用户openId"></a>微信网页授权获取用户openId</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/" title="微信公众号开发(Python)[1]">微信公众号开发(一)——申请微信公众号以及配置流程简介</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/" title="微信公众号开发(Python)[2]">微信公众号开发(二)——解析微信请求及响应消息</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/" title="微信公众号开发(Python)[3]">微信公众号开发(三)——解析微信事件XML数据消息及响应</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/" title="微信公众号开发(Python)[4]">微信公众号开发(四)——公众号按钮设置及自己的微信按钮编辑器</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/" title="微信公众号开发(Python)[5]">微信公众号开发(五)——微信网页授权获取用户openId</a></li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>Python: 3.8.10</li><li>Flask: 3.0.0</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Python</category>
      
      <category>公众号开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公众号开发</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发(Python)[4]</title>
    <link href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/"/>
    <url>/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<h1 id="公众号按钮设置及自己的微信按钮编辑器"><a href="#公众号按钮设置及自己的微信按钮编辑器" class="headerlink" title="公众号按钮设置及自己的微信按钮编辑器"></a>公众号按钮设置及自己的微信按钮编辑器</h1><div class="note note-info">            <p><strong>参考文章:</strong> </p><p><a href="https://www.microanswer.cn/blog/13">【Microanswer】-【微信公众号开发】三、解析微信事件XML数据消息及响应</a></p><p><a href="https://zhuanlan.zhihu.com/p/46720483">Python 用 Flask 从零搭建微信公众号后台 菜鸟入门级 - 知乎 (zhihu.com)</a></p>          </div><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/" title="微信公众号开发(Python)[1]">微信公众号开发(一)——申请微信公众号以及配置流程简介</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/" title="微信公众号开发(Python)[2]">微信公众号开发(二)——解析微信请求及响应消息</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/" title="微信公众号开发(Python)[3]">微信公众号开发(三)——解析微信事件XML数据消息及响应</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/" title="微信公众号开发(Python)[4]">微信公众号开发(四)——公众号按钮设置及自己的微信按钮编辑器</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/" title="微信公众号开发(Python)[5]">微信公众号开发(五)——微信网页授权获取用户openId</a></li></ol><p>微信公众号提供了许多API接口用于完成一些配置，或者获取公众号相关的信息。但是每一个接口都需要一个<strong>凭据</strong>参数，叫<code>access_token</code>, 所以在调用微信的API接口之前，都必须要先准备好自己的<code>access_token</code>。</p><h3 id="准备-access-token"><a href="#准备-access-token" class="headerlink" title="准备 access_token"></a>准备 access_token</h3><p><code>access_token</code> 的获取就比较简单，它不需要复杂的加密参数，只需要几个必要的信息参数就可以获取：</p><ol><li><code>grant_type</code>: 获取 access_token 就一直填写 client_credential</li><li><code>appid</code>: 公众号的appid</li><li><code>secret</code>：公众号后台配置的appsecret</li></ol><p>使用这些参数，用GET方式请求地址：</p><p><a href="https://api.weixin.qq.com/cgi-bin/token">https://api.weixin.qq.com/cgi-bin/token</a></p><p>就可以获取到 <code>access_token</code> 了， 不过要注意，微信后台有ip白名单设定，你必须要先将你的服务器IP地址配置到白名单里，你的请求才能正常的获取到 <code>access_token</code>。一个非常简单的示列请求方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">params = &#123;<br>        <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;client_credential&quot;</span>,<br>        <span class="hljs-string">&quot;appid&quot;</span>: <span class="hljs-string">&quot;你的appid&quot;</span>,<br>        <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;你的secret&quot;</span><br>    &#125;<br>resp = requests.get(<span class="hljs-string">&#x27;https://api.weixin.qq.com/cgi-bin/token&#x27;</span>, params=params)<br>resp_json = resp.json()<br>access_token = resp_json[<span class="hljs-string">&#x27;access_token&#x27;</span>]<br></code></pre></td></tr></table></figure><p>当我们顺利的拿到了 <code>access_token</code> 的值后，就可以进行想要的API接口请求了。不过要注意，获取 <code>access_token</code> 接口每天调用次数是有限制的，如果每次想要调用某个API时，都去获取一遍 <code>access_token</code> 的话，很快，你就会发现接口调用次数超过限制了。所以，每当获取完成<code>access_token</code>时，应该将其保存下来，每个 <code>access_token</code> 最多坚持2小时，2小时过后，你就必须重新获取另一个<code>access_token</code>了，在这两小时内，你都可以放心的使用它。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Python</category>
      
      <category>公众号开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公众号开发</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发(Python)[3]</title>
    <link href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/"/>
    <url>/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<h1 id="解析微信事件XML数据消息及响应"><a href="#解析微信事件XML数据消息及响应" class="headerlink" title="解析微信事件XML数据消息及响应"></a>解析微信事件XML数据消息及响应</h1><div class="note note-info">            <p><strong>参考文章:</strong> </p><p><a href="https://www.microanswer.cn/blog/13">【Microanswer】-【微信公众号开发】三、解析微信事件XML数据消息及响应</a></p><p><a href="https://zhuanlan.zhihu.com/p/46720483">Python 用 Flask 从零搭建微信公众号后台 菜鸟入门级 - 知乎 (zhihu.com)</a></p>          </div><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/" title="微信公众号开发(Python)[1]">微信公众号开发(一)——申请微信公众号以及配置流程简介</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/" title="微信公众号开发(Python)[2]">微信公众号开发(二)——解析微信请求及响应消息</a></li><li>微信公众号开发(三)——解析微信事件XML数据消息及响应</li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/" title="微信公众号开发(Python)[4]">微信公众号开发(四)——公众号按钮设置及自己的微信按钮编辑器</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/" title="微信公众号开发(Python)[5]">微信公众号开发(五)——微信网页授权获取用户openId</a></li></ol><h3 id="获取提交的XML数据内容并解析"><a href="#获取提交的XML数据内容并解析" class="headerlink" title="获取提交的XML数据内容并解析"></a>获取提交的XML数据内容并解析</h3><p>由于 xml 数据是在 请求体里以post方式提交上来的，所以不能像获取基本参数那样使用 <code>request.args</code> 去获取了，这部分数据在请求体里面，要获取这部分数据需要使用 <code>request.stream</code> 方法去获取到里面的内容。 而这个得到的是一个输入流，那么问题就变成了<em>如何从输入流中读取其字符串</em>, 可以直接用<code>lxml</code>库进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_message</span>():<br><span class="hljs-comment"># 处理接收到的用户消息，并做出相应的回复</span><br>    <span class="hljs-comment"># 这里需要根据接收到的 XML 消息格式来解析用户发送的消息，并进行逻辑处理</span><br>    <span class="hljs-comment"># 返回符合微信公众号消息格式的 XML 内容作为回复</span><br>    xml = etree.fromstring(request.stream.read())<br>    <br>    MsgType = xml.find(<span class="hljs-string">&quot;MsgType&quot;</span>).text<br>    ToUserName = xml.find(<span class="hljs-string">&quot;ToUserName&quot;</span>).text<br>    FromUserName = xml.find(<span class="hljs-string">&quot;FromUserName&quot;</span>).text<br>    CreateTime = xml.find(<span class="hljs-string">&quot;CreateTime&quot;</span>).text<br>    MsgId = xml.find(<span class="hljs-string">&quot;MsgId&quot;</span>).text<br>    ...<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>ToUserName</strong></td><td>开发者微信号</td></tr><tr><td><strong>FromUserName</strong></td><td>发送方账号（一个OpenID）</td></tr><tr><td>CreateTime</td><td>消息创建时间 （整型）</td></tr><tr><td><strong>MsgType</strong></td><td>消息类型:<br /><code>event</code>:事件<br /><code>text</code>:文本消息<br /><code>image</code>:图片消息<br /><code>voice</code>:语音消息<br /><code>video</code>:视频消息<br /><code>shortvideo</code>:小视频消息<br /><code>location</code>:地理位置消息<br /><code>link</code>:链接消息</td></tr><tr><td>MsgId</td><td>消息id</td></tr><tr><td><strong>Event</strong></td><td><strong>事件类型</strong><br /><code>subscribe</code>:关注事件. 特别的：如果未关注公众号用户扫描参数二维码关注， 也是使用此值，不过此时<code>EventKey</code>的值有前缀<strong>qrscene_</strong><br /><code>unsubscribe</code>取消关注事件<br /><code>SCAN</code>: 扫描带参数二维码事件<br /><code>LOCATION</code>: 上报地理位置事件<br /><code>CLICK</code>: 自定义key按钮菜单事件<br /><code>VIEW</code>: 自定义view按钮菜单事件<br /><code>MASSSENDJOBFINISH</code>: 群发消息结果事件<br /><code>TEMPLATESENDJOBFINISH</code>: 发送模板消息结果事件</td></tr><tr><td><strong>EventKey</strong></td><td>事件关键值</td></tr><tr><td>MenuId</td><td>菜单按钮ID</td></tr><tr><td><strong>Content</strong></td><td>文本消息内容</td></tr><tr><td>PicUrl</td><td>图片消息的图片链接（由系统生成）</td></tr><tr><td>MediaId</td><td>消息媒体id，可以调用获取临时素材接口拉取数据。</td></tr><tr><td>Format</td><td>语音消息格式，如amr，speex等</td></tr><tr><td>Recognition</td><td>语音识别结果，UTF8编码</td></tr><tr><td>ThumbMediaId</td><td>视频消息缩略图的媒体id，可以调用多媒体文件下载接口拉取数据。</td></tr><tr><td>Location_X</td><td>地理位置纬度</td></tr><tr><td>Location_Y</td><td>地理位置经度</td></tr><tr><td>Scale</td><td>地图缩放大小</td></tr><tr><td>Label</td><td>地理位置信息</td></tr><tr><td>Title</td><td>链接消息标题</td></tr><tr><td>Description</td><td>链接消息描述</td></tr><tr><td>Url</td><td>链接消息链接</td></tr><tr><td>Ticket</td><td>事件，二维码的ticket，可用来换取二维码图片</td></tr><tr><td>Latitude</td><td>事件，上报地理位置，地理位置纬度</td></tr><tr><td>Longitude</td><td>事件，上报地理位置，地理位置经度</td></tr><tr><td>Precision</td><td>事件，上报地理位置，地理位置精度</td></tr></tbody></table><h3 id="响应微信消息或事件"><a href="#响应微信消息或事件" class="headerlink" title="响应微信消息或事件"></a>响应微信消息或事件</h3><p>先简单的处理一下普通文本消息吧，不管用户向我们出了什么样内容的文本消息，我们都回复：然后捏?</p><p>首先判断消息的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wechat&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_message</span>():<br>    xml = etree.fromstring(request.stream.read())<br>    <br>    MsgType = xml.find(<span class="hljs-string">&quot;MsgType&quot;</span>).text<br>    ToUserName = xml.find(<span class="hljs-string">&quot;ToUserName&quot;</span>).text<br>    FromUserName = xml.find(<span class="hljs-string">&quot;FromUserName&quot;</span>).text<br>    CreateTime = xml.find(<span class="hljs-string">&quot;CreateTime&quot;</span>).text<br>    MsgId = xml.find(<span class="hljs-string">&quot;MsgId&quot;</span>).text<br><br>    send = <span class="hljs-string">f&#x27;&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[<span class="hljs-subst">&#123;FromUserName&#125;</span>]]&gt;&lt;/ToUserName&gt;&#x27;</span> \<br>           <span class="hljs-string">f&#x27;&lt;FromUserName&gt;&lt;![CDATA[<span class="hljs-subst">&#123;ToUserName&#125;</span>]]&gt;&lt;/FromUserName&gt;&#x27;</span> \<br>           <span class="hljs-string">f&#x27;&lt;CreateTime&gt;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time()))&#125;</span>&lt;/CreateTime&gt;&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;text&#x27;</span> == MsgType:<br>        send += <span class="hljs-string">f&#x27;&lt;MsgType&gt;&lt;![CDATA[<span class="hljs-subst">&#123;MsgType&#125;</span>]]&gt;&lt;/MsgType&gt;&#x27;</span> \<br>                <span class="hljs-string">f&#x27;&lt;Content&gt;&lt;![CDATA[欢迎关注Noobbei]]&gt;&lt;/Content&gt;&lt;/xml&gt;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        send = <span class="hljs-string">&#x27;success&#x27;</span><br>    response = make_response(send)<br>    response.content_type = <span class="hljs-string">&#x27;application/xml&#x27;</span><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Python</category>
      
      <category>公众号开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公众号开发</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发(Python)[2]</title>
    <link href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
    <url>/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="解析微信请求及响应消息"><a href="#解析微信请求及响应消息" class="headerlink" title="解析微信请求及响应消息"></a>解析微信请求及响应消息</h1><div class="note note-info">            <p><strong>参考文章:</strong> </p><p><a href="https://www.microanswer.cn/blog/13">【Microanswer】-【微信公众号开发】三、解析微信事件XML数据消息及响应</a></p><p><a href="https://zhuanlan.zhihu.com/p/46720483">Python 用 Flask 从零搭建微信公众号后台 菜鸟入门级 - 知乎 (zhihu.com)</a></p>          </div><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/" title="微信公众号开发(Python)[1]">微信公众号开发(一)——申请微信公众号以及配置流程简介</a></li><li>微信公众号开发(二)——解析微信请求及响应消息</li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/" title="微信公众号开发(Python)[3]">微信公众号开发(三)——解析微信事件XML数据消息及响应</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/" title="微信公众号开发(Python)[4]">微信公众号开发(四)——公众号按钮设置及自己的微信按钮编辑器</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/" title="微信公众号开发(Python)[5]">微信公众号开发(五)——微信网页授权获取用户openId</a></li></ol><p>微信开发第一步即为配置我方服务器的接口地址，为了成功配置，需要在配置前先将此接口根据微信的调用流程来开发完成，才可能成功的配置到微信后台。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>在开始写接口前, 先准备好开发环境, 我是用Python+Flask搭建的, 具体版本如下: </p><ul><li>Python: 3.10.0</li><li>Flask: 3.0.0 - web框架</li><li>lxml: 5.1.0 - 解析微信发来的xml数据</li><li>自己的云服务器(或者自己电脑内网穿透): 我的是阿里云的ECS服务器(Alibaba Cloud Linux3) - 用来跑自己的后端项目</li></ul><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>Nginx 配置目录在 <em>&#x2F;etc&#x2F;nginx&#x2F;conf.d</em> ，在此目录下创建一个配置文件 <em>wechat.conf</em> ：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">server &#123;<br>        listen 80;<br>        server_name 【你的域名】;<br><br>        location / &#123;<br>            proxy_pass http://127.0.0.1:8000;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="创建一个Flask项目"><a href="#创建一个Flask项目" class="headerlink" title="创建一个Flask项目"></a>创建一个Flask项目</h3><p>写好一个基本框架, 用来处理微信的请求.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, make_response<br><span class="hljs-keyword">import</span> hashlib<br><br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wechat&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">idnex</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 验证服务器地址有效性</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">def</span> validate(timestamp, nonce, token, signature):<br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 处理用户消息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_message</span>():<br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(port=<span class="hljs-number">8000</span>) <span class="hljs-comment"># 此端口要和上面反向代理的端口一致</span><br><br></code></pre></td></tr></table></figure><h3 id="获取微信配置参数"><a href="#获取微信配置参数" class="headerlink" title="获取微信配置参数"></a>获取微信配置参数</h3><p>阅读了上一篇文章<a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/" title="微信公众号开发(Python)[1]">微信公众号开发(一)——申请微信公众号以及配置流程简介</a>便可知道，在微信后台配置时，微信发送过来的请求是GET方式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wechat&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    token = <span class="hljs-string">&#x27;XXXXX&#x27;</span>  <span class="hljs-comment"># 填写自己自定义的token, 要和微信公众平台基本配置中填写的音一样</span><br><br>    data = request.args<br>    signature = data.get(<span class="hljs-string">&#x27;signature&#x27;</span>)<br>    timestamp = data.get(<span class="hljs-string">&#x27;timestamp&#x27;</span>)<br>    nonce = data.get(<span class="hljs-string">&#x27;nonce&#x27;</span>)<br>    <span class="hljs-comment"># get请求中有echostr参数, post中没有, 可以通过这个来判断请求类型</span><br>    echostr = data.get(<span class="hljs-string">&#x27;echostr&#x27;</span>)<br><br>    <span class="hljs-comment"># GET请求</span><br>...<br><br>    <span class="hljs-comment"># POST请求</span><br>...<br><br><span class="hljs-comment"># 加密参数比对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">timestamp, nonce, token, signature</span>):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="进行加密参数比对"><a href="#进行加密参数比对" class="headerlink" title="进行加密参数比对"></a>进行加密参数比对</h3><p>将获取到的参数组成列表, 进行字典排序, 拼接成字符串, 然后进行sha1加密, 和signature进行比对, 代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">timestamp, nonce, token, signature</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    验证服务器地址有效性</span><br><span class="hljs-string">    :param timestamp:时间戳</span><br><span class="hljs-string">    :param nonce: 随机数</span><br><span class="hljs-string">    :param token: 自定义的token</span><br><span class="hljs-string">    :param signature: 微信服务器发来的验证参数</span><br><span class="hljs-string">    :return: 是否能验证成功</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    temp = [timestamp, nonce, token]<br>    temp = <span class="hljs-built_in">sorted</span>(temp)<br>    temp = <span class="hljs-string">&#x27;&#x27;</span>.join(temp)<br><br>    <span class="hljs-comment"># 进行sha1加密</span><br>    sha1 = hashlib.sha1()<br>    sha1.update(temp.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    hashcode = sha1.hexdigest()<br><br>    <span class="hljs-keyword">return</span> hashcode == signature<br></code></pre></td></tr></table></figure><h3 id="返回响应"><a href="#返回响应" class="headerlink" title="返回响应"></a>返回响应</h3><p>如果校验不通过，直接返回失败文字。校验通过就会继续后面的代码，检测到这是配置请求，就返回原样传入的随机字符串。最终，完整的接口方法代码是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wechat&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    token = <span class="hljs-string">&#x27;XXXXXXXX&#x27;</span>  <span class="hljs-comment"># 填写自己自定义的token, 要和微信公众平台基本配置中填写的音一样</span><br><br>    data = request.args<br>    signature = data.get(<span class="hljs-string">&#x27;signature&#x27;</span>)<br>    timestamp = data.get(<span class="hljs-string">&#x27;timestamp&#x27;</span>)<br>    nonce = data.get(<span class="hljs-string">&#x27;nonce&#x27;</span>)<br>    <span class="hljs-comment"># get请求中有echostr参数, post中没有, 可以通过这个来判断请求类型</span><br>    echostr = data.get(<span class="hljs-string">&#x27;echostr&#x27;</span>)<br><br>    <span class="hljs-comment"># GET请求</span><br>    <span class="hljs-keyword">if</span> echostr:<br>        <span class="hljs-comment"># 和微信传来的signature进行比对, 如果一样, 说明是从微信服务器传来的, 把echostr原样返回, 否则返回空字符串</span><br>        <span class="hljs-keyword">return</span> echostr <span class="hljs-keyword">if</span> validate() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-comment"># POST请求</span><br>    ...<br><br><br><span class="hljs-comment"># 验证服务器地址有效性</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/wechat&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">timestamp, nonce, token, signature</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    验证服务器地址有效性</span><br><span class="hljs-string">    :param timestamp:时间戳</span><br><span class="hljs-string">    :param nonce: 随机数</span><br><span class="hljs-string">    :param token: 自定义的token</span><br><span class="hljs-string">    :param signature: 微信服务器发来的验证参数</span><br><span class="hljs-string">    :return: 是否能验证成功</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    temp = [timestamp, nonce, token]<br>    temp = <span class="hljs-built_in">sorted</span>(temp)<br>    temp = <span class="hljs-string">&#x27;&#x27;</span>.join(temp)<br><br>    <span class="hljs-comment"># 进行sha1加密</span><br>    sha1 = hashlib.sha1()<br>    sha1.update(temp.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))<br>    hashcode = sha1.hexdigest()<br><br>    <span class="hljs-keyword">return</span> hashcode == signature<br></code></pre></td></tr></table></figure><p>到此, 就可以在基础页面点击提交按钮, 测试是否成功, 如果成果, 会返回<code>配置成功</code>字样</p><p><img src="/./../img/post_img/image-20240113165906949.png" alt="配置成功"></p><h3 id="继续开发"><a href="#继续开发" class="headerlink" title="继续开发"></a>继续开发</h3><p>完成了接口配置，才真正是步入微信开发的大门。下一篇将介绍如何响应用户发送的消息。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Python</category>
      
      <category>公众号开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公众号开发</tag>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发(Python)[1]</title>
    <link href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
    <url>/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="申请微信公众号以及配置流程简介"><a href="#申请微信公众号以及配置流程简介" class="headerlink" title="申请微信公众号以及配置流程简介"></a>申请微信公众号以及配置流程简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>微信公众号开发(一)——申请微信公众号以及配置流程简介</li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%8C)/" title="微信公众号开发(Python)[2]">微信公众号开发(二)——解析微信请求及响应消息</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%B8%89)/" title="微信公众号开发(Python)[3]">微信公众号开发(三)——解析微信事件XML数据消息及响应</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E5%9B%9B)/" title="微信公众号开发(Python)[4]">微信公众号开发(四)——公众号按钮设置及自己的微信按钮编辑器</a></li><li><a href="/2024/01/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91(%E4%BA%94)/" title="微信公众号开发(Python)[5]">微信公众号开发(五)——微信网页授权获取用户openId</a></li></ol><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要开发微信公众号, 首先得有注册一个微信公众号. </p><p>个人注册建议注册<strong>订阅号</strong>.</p><p>什么是订阅号？</p><p>订阅号：为媒体和个人提供一种新的信息传播方式，主要功能是在微信侧给用户传达资讯；（功能类似报纸杂志，提供新闻信息或娱乐趣事）</p><p>适用人群：个人、媒体、企业、政府或其他组织。</p><p>群发次数：订阅号（认证用户、非认证用户）1天内可群发1次消息。</p><p>下面是微信公众号的注册准备以及流程.</p><h2 id="个人注册微信公众号-订阅号-准备"><a href="#个人注册微信公众号-订阅号-准备" class="headerlink" title="个人注册微信公众号(订阅号)准备"></a>个人注册微信公众号(订阅号)准备</h2><ul><li><p><strong>邮箱</strong>: 确保该邮箱没有用于注册绑定过过其他公众号、小程序、开放平台；</p></li><li><p><strong>公众号主体的相关证件</strong>: 提前准备好身份证正反面照片</p></li><li><p><strong>账号类型</strong>: 订阅号</p></li><li><p><strong>公众号名称和头像</strong>:</p><ul><li><p>公众号的头像: 随时可以修改, 但是还是建议提前设计好；</p></li><li><p>公众号的名称: 个人主体一年可以修改2次.</p></li></ul></li></ul><h2 id="注册步骤"><a href="#注册步骤" class="headerlink" title="注册步骤"></a>注册步骤</h2><ol><li>打开微信公众平台官网: <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a> 右上角点击<code>立即注册</code></li></ol><p><img src="/./../img/post_img/image-20240113140237992.png" alt="微信公众平台官网"></p><ol start="2"><li><p>选择账号类型</p><p><img src="/./../img/post_img/image-20240113141259187.png" alt="选择账号类型"></p></li><li><p>填写邮箱, 登录邮箱, 查看激活邮件, 填写邮箱验证码激活, 点击注册</p><p><img src="/./../img/post_img/image-20240113141524036.png" alt="填写邮箱"></p><p><img src="/./../img/post_img/image-20240113143316785.png" alt="激活邮件"></p><div class="note note-warning">            <p>若未收到此邮件：</p><p>  ①请将微信团队邮箱设置为白名单后重新发送邮件，操作方法：登录邮箱-&gt;点击设置-&gt;反垃圾&#x2F;黑名单-&gt;添加白名单（<a href="mailto:&#x77;&#x65;&#105;&#120;&#x69;&#110;&#116;&#101;&#97;&#109;&#64;&#116;&#x65;&#x6e;&#99;&#x65;&#110;&#116;&#x2e;&#x63;&#111;&#109;">&#x77;&#x65;&#105;&#120;&#x69;&#110;&#116;&#101;&#97;&#109;&#64;&#116;&#x65;&#x6e;&#99;&#x65;&#110;&#116;&#x2e;&#x63;&#111;&#109;</a>）</p><p>  ②如果已经设置，建议更换浏览器&#x2F;网络环境重新发送，或者是使用其他邮箱激活。</p>          </div></li><li><p>选择类型, 选择注册地</p><p><img src="/./../img/post_img/image-20240113143624509.png" alt="image-20240113143624509"></p><p><img src="/./../img/post_img/image-20240113143848819.png" alt="image-20240113143848819"></p></li><li><p>信息等级, 选择个人类型</p><p><img src="/./../img/post_img/image-20240113144742748.png" alt="image-20240113144742748"></p></li><li><p>填写身份证信息、手机号</p><p><img src="/./../img/post_img/image-20240113144727238.png" alt="image-20240113144727238"></p></li><li><p>填写创作者信息，点击继续（如使用过其他内容创作平台，可填写相关信息。如没有，可无需填写。无论是否填写，对账号后续使用不会有影响）</p><p><img src="/./../img/post_img/image-20240113144841652.png" alt="image-20240113144841652"></p></li><li><p>填写账号信息，包括公众号名称、功能介绍，选择运营地区</p></li></ol><p><img src="/./../img/post_img/5124e8158f47a687cd3e774a3d9b8e00.png" alt="img"></p><p>恭喜注册成功！可以开始使用公众号了~</p><p><img src="/./../img/post_img/0490062b1811e615320b53b08b09d11d.jpg" alt="img"></p><h2 id="后台配置及微信调用流程"><a href="#后台配置及微信调用流程" class="headerlink" title="后台配置及微信调用流程"></a>后台配置及微信调用流程</h2><h3 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h3><p>公众号申请成功后，要做一些基本配置，让微信知道我方服务器地址多少，所以，我们首要第一步就是要在微信后台管理界面上配置好我方服务器提供给微信后台调用的接口地址。</p><p>在微信后台找到：【开发】-【基本配置】-【服务器配置】-【修改配置】例如下图：</p><p><img src="/./../img/post_img/image-20240113151205267.png" alt="image-20240113151205267"></p><p><code>URL</code>: 你自己的接口url, 需要提前写好接口, 否则点击提交是不会成功的.</p><p><code>Token</code>: 自定义的字符串, 必须为英文或数字, 长度3-32字符, 用于验证请求是否来自微信.</p><p><code>EncodingAESKey</code>: 消息加解密密钥, 用于消息体加解密过程.</p><h3 id="微信调用我方服务器流程"><a href="#微信调用我方服务器流程" class="headerlink" title="微信调用我方服务器流程"></a>微信调用我方服务器流程</h3><p>无论是微信将用户消息推送给我方服务器，还是在微信后台进行接口地址的配置，微信服务器都会调用这个配置的接口地址，如果这个接口地址不可访问，微信会直接提示配置失败.</p><p><strong>流程1、微信后台的HTTP请求</strong></p><p>在基本配置页面, 点击<strong>提交</strong>时，微信会向配置的接口地址发出一个HTTP的GET请求，该请求携带了几个参数值，我方服务器应解析这些参数值并告诉微信后台是否正确。下表列出了微信请求时给的参数：</p><table><thead><tr><th>字段</th><th>示列值</th><th>含义</th></tr></thead><tbody><tr><td>signature</td><td>043eebc1e8ce70c1a39d342e7404bb16662a5449</td><td>微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td></tr><tr><td>timestamp</td><td>1561912408</td><td>时间戳</td></tr><tr><td>nonce</td><td>1671776044</td><td>随机数</td></tr><tr><td>echostr</td><td>54yvj673x21cb57h</td><td>随机字符串</td></tr></tbody></table><p>我方服务器将会收到这个请求，必须务必验证 <code>signature</code> 的正确性以保证这个请求是来自微信后台的，一切确认无误后，只需要将 <code>echostr</code> 的内容原样返回即可。</p><p><strong>流程2、我方服务器验证请求</strong></p><p>我方服务器获取到请求后，务必进行 <code>signature</code> 正确性判断，下面是来自微信官网的一张流程图，方便对验证流程的直观说明：</p><p><img src="/./../img/post_img/wechat_1_3.jpeg" alt="流程"></p><p>图中提到的“哈希算法”，其实使用的算法是 <code>sha1</code> 算法，下文将介绍如何使用 <code>Python</code> 编写对该请求的验证。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Python</category>
      
      <category>公众号开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公众号开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Windows开启HDR后Chrome内截图泛白的问题</title>
    <link href="/2024/01/13/Windows%E5%BC%80%E5%90%AFHDR%E5%90%8E,%20Chrome%E5%86%85%E6%88%AA%E5%9B%BE%E6%B3%9B%E7%99%BD%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/01/13/Windows%E5%BC%80%E5%90%AFHDR%E5%90%8E,%20Chrome%E5%86%85%E6%88%AA%E5%9B%BE%E6%B3%9B%E7%99%BD%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在Windows开启了HDR功能后, 在Chrome浏览器内截图, 图片泛白.</p><ul><li><p>问题展示</p><p><img src="/./../img/post_img/image-20240113142950142.png" alt="问题图片"></p></li><li><p>解决后图片展示</p><p><img src="/./../img/post_img/image-20240113143055781.png" alt="修复后的图片"></p></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><ol><li><p>在Chrome地址栏输入<code>chrome://flags/</code></p><p><img src="/./../img/post_img/image-20240113142543919.png" alt="搜索栏输入chrome://flags"></p></li><li><p>在页面的搜索栏搜索<code>force color profile</code></p></li><li><p>在选项中选择所对应的颜色管理</p><p><img src="/./../img/post_img/image-20240113142716413.png" alt="选择对应的颜色管理"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Chrome</tag>
      
      <tag>截图</tag>
      
      <tag>HDR</tag>
      
      <tag>曝光</tag>
      
      <tag>泛白</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx的配置文件</title>
    <link href="/2024/01/10/Nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2024/01/10/Nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h2><h3 id="从配置文件开始到-events-块之间的内容"><a href="#从配置文件开始到-events-块之间的内容" class="headerlink" title="从配置文件开始到 events 块之间的内容"></a>从配置文件开始到 events 块之间的内容</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要设置一些影响nginx 服务器整体运行的配置指令.</p><p>主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志</p><p>存放路径和类型以及配置文件的引入等。</p><ul><li>worker_processes:</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约，<strong>一般有多少个CPU核就配置多少</strong>。</p><ul><li><strong>events</strong>的配置：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><p>上述例子就表示每个 work process 支持的最大连接数为 1024.</p><p>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h3 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h3><p>http全局块配置的指令包括文件引入, MIME-TYPE定义, 日志自定义, 连接超时时间, 单连接请求数上限等.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ul><li>引入其他配置文件</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">include</span>       mime.types;<br></code></pre></td></tr></table></figure><ul><li>默认的文件类型</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">default_type</span>  application/octet-stream;<br></code></pre></td></tr></table></figure><ul><li>优化配置</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><ul><li>超时时间</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br></code></pre></td></tr></table></figure><h4 id="server块★"><a href="#server块★" class="headerlink" title="server块★"></a>server块★</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>       <span class="hljs-attribute">server_name</span>  localhost;<br><br>       <span class="hljs-section">location</span> / &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>           <span class="hljs-attribute">index</span>  index.html index.htm;<br>       &#125;<br><br>       <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>       <span class="hljs-section">location</span> = /50x.html &#123;<br>           <span class="hljs-attribute">root</span>   html;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。后面会详细介绍虚拟主机的概念。</p><p>每个 http 块可以包括多个 server 块，每个 server 块就相当于一个虚拟主机。</p><p>每个 server 块也分为全局 server 块，以及可以同时包含多个 location块。</p><h5 id="其他配置-1"><a href="#其他配置-1" class="headerlink" title="其他配置"></a>其他配置</h5><ul><li><p>listen</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><p>用于配置网络监听. 主要有以下三种配置语法结构:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span> *:<span class="hljs-number">80</span> | *:<span class="hljs-number">8080</span>;   <span class="hljs-comment"># 监听所有80端口和8080端口</span><br><span class="hljs-attribute">listen</span> IP_address:port; <span class="hljs-comment"># 监听制定的地址和端口号</span><br><span class="hljs-attribute">listen</span> IP_address;      <span class="hljs-comment"># 监听指定ip地址的所有端口</span><br></code></pre></td></tr></table></figure></li><li><p>server_name</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_name</span>  www.xxx.com;<br></code></pre></td></tr></table></figure><p>用于虚拟主机的配置. 通常分为以下两种:</p><ol><li><p>基于名称的虚拟主机配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_name</span> www.xxx.com;<br></code></pre></td></tr></table></figure></li><li><p>基于IP地址的虚拟主机配置</p><p>这种结构不需要考虑通配符和正则表达式的问题.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_naem</span> <span class="hljs-number">192.168.3.1</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h5 id="location"><a href="#location" class="headerlink" title="location"></a>location</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"> <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>&#125;<br></code></pre></td></tr></table></figure><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name&#x2F;uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如 前面的 &#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><p>一个 server 块可以配置多个 location 块。</p><p><strong>语法</strong>:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> [ = | <span class="hljs-regexp">~ |</span> <span class="hljs-regexp">~* |</span><span class="hljs-regexp"> ^~</span> ] uri &#123;<br>    <span class="hljs-attribute">root</span> /usr/local/nginx/test;<br>    <span class="hljs-attribute">index</span> test.html;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p><code>=</code> ：用于不含正则表达式的 uri 前，要求请求字符串与 uri <strong>严格匹配</strong>，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p></li><li><p><code>~</code>：用于表示 uri 包含正则表达式，并且区分大小写。</p></li><li><p><code>~*</code>：用于表示 uri 包含正则表达式，并且不区分大小写。</p></li><li><p><code>^~</code>：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p></li><li><p>不接任何符号: 代表<strong>模糊匹配</strong></p></li></ol><p><strong>注意</strong>：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。</p><p>优先级： <code>=</code> &gt; <code>^~</code> &gt; <code>~</code> | <code>~*</code> &gt;<code>模糊匹配</code></p><ul><li><p><code>root</code>: 请求的文件的目录</p></li><li><p><code>index</code>: 用于设置网站的默认首页</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">index</span> filename ...;<br></code></pre></td></tr></table></figure><p>后面的文件名称可以有多个, 中间用空格隔开.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">index</span> index.html index.htm;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo - 将Hexo部署到云服务器</title>
    <link href="/2024/01/08/Hexo%20%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/01/08/Hexo%20%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-将Hexo部署到云服务器"><a href="#Hexo-将Hexo部署到云服务器" class="headerlink" title="Hexo: 将Hexo部署到云服务器"></a>Hexo: 将Hexo部署到云服务器</h1><p><strong>环境</strong>:</p><ul><li>我的电脑: Win11</li><li>云服务器: Alibaba Cloud Linux3</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://blog.csdn.net/qq_28299311/article/details/88844442">hexo+git+nginx在云服务器搭建hexo博客教程</a></p></li><li><p><a href="https://blog.csdn.net/qq_35561857/article/details/81590953">带你跳过各种坑，一次性把 Hexo 博客部署到自己的服务器</a></p></li><li><p><a href="https://blog.csdn.net/jiunian_2761/article/details/122908142">Hexo博客进阶：将Hexo部署到云服务器（CentOS）_hexo部署到云函数-CSDN博客</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>博客</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的基本命令-2</title>
    <link href="/2024/01/07/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-2/"/>
    <url>/2024/01/07/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-2/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h2><p>学习 mkdir, touch, rm, rmdir, mv, cp, cat, more, less命令</p><h3 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h3><p>作用<strong>：</strong>命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> [option](选项) [DirName](目录)<br></code></pre></td></tr></table></figure><p>*<em><strong>命令功能</strong>：</em>*</p><p>通过 mkdir 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。</p><p>要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即同一个目录下不能有同名的目录或(区分大小写)</p><p>命令参数：</p><table><thead><tr><th>选项参数</th><th>完整参数</th><th>功能描述</th></tr></thead><tbody><tr><td>-m</td><td>–mode&#x3D;模式</td><td>设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</td></tr><tr><td>-p</td><td>–parents</td><td>可以是一个路径名称。<br/>此时若路径中的某些目录尚不存在,加上此选项后,<br/>系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;</td></tr><tr><td>-v</td><td>–verbose<br />–help<br />–version</td><td>–verbose 每次创建新目录都显示信息<br/>–help显示此帮助信息并退出<br/>–version输出版本信息并退出</td></tr></tbody></table><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建目录                        正常使用无参数</span><br>[root@localhost text.txt]<span class="hljs-comment"># mkdir mydir</span><br>[root@localhost text.txt]<span class="hljs-comment"># ll</span><br>总用量 0<br>drwxr-xr-x. 2 root root 6 9月   7 13:06 mydir<br><br><span class="hljs-comment"># 切换至mydir目录</span><br>[root@localhost text.txt]<span class="hljs-comment"># cd mydir/</span><br><br><span class="hljs-comment"># 参数-p 进行递归创建目录          使用参数 -p</span><br>[root@localhost mydir]<span class="hljs-comment"># mkdir -p text1/text2</span><br><br><span class="hljs-comment"># 切换至text2目录</span><br>[root@localhost mydir]<span class="hljs-comment"># cd text1/text2/</span><br><br>[root@localhost text2]<span class="hljs-comment"># pwd</span><br>/root/mydir/text1/text2<br><br>总结：<span class="hljs-comment"># 使用参数 -p 可以创建多层路径文件目录</span><br><br><br><br><br><br><span class="hljs-comment"># 分别创建三个目录，并设置权限                  使用参数 -m</span><br>[root@localhost text2]<span class="hljs-comment"># mkdir -m 777  exercise1</span><br>[root@localhost text2]<span class="hljs-comment"># mkdir -m 765  exercise2</span><br>[root@localhost text2]<span class="hljs-comment"># mkdir -m 654  exercise3</span><br><br>[root@localhost text2]<span class="hljs-comment"># ll</span><br>总用量 0<br>drwxrwxrwx. 2 root root 6 9月   7 13:22 exercise1<br>drwxrw-r-x. 2 root root 6 9月   7 13:23 exercise2<br>drw-r-xr--. 2 root root 6 9月   7 13:23 exercise3<br><br>总结：<span class="hljs-comment"># 使用参数 -m 可以创建文件并设置文件的权限  </span><br>注意(777，765，654 其中每一个数字，分别表示User、Group、及Other的权限。r=4，w=2，x=1)<br><br><br><br><br><span class="hljs-comment"># 创建一个目录，并设置权限                  使用参数 -v   -m</span><br>[root@localhost text2]<span class="hljs-comment"># mkdir -v -m 654  exercise4</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;exercise4&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="2、touch-命令"><a href="#2、touch-命令" class="headerlink" title="2、touch 命令"></a>2、touch 命令</h4><p><strong>touch</strong></p><p>​           <strong>作用：</strong>用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><p>​                      ls -l 可以显示档案的时间记录。</p><p>​           <strong>语法：</strong>touch [-acfm] [-d&lt;日期时间&gt;] [-r&lt;参考文件或目录&gt;]  [-t&lt;日期时间&gt;]  [–help]  [–version]  [文件或目录…]</p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td>-a</td><td>只更新访问时间，不改变修改时间</td></tr><tr><td>-m</td><td>改变修改时间记录</td></tr><tr><td>-c</td><td>不创建不存在的文件</td></tr><tr><td>-f</td><td>不使用，是为了与其他 unix 系统的相容性而保留。</td></tr><tr><td>-m</td><td>只更新修改时间，不改变访问时间</td></tr><tr><td>-r file</td><td>使用文件file的时间更新文件的时间</td></tr><tr><td>-t</td><td>将时间修改为参数指定的日期,如：07081556代表7月8号15点56分</td></tr><tr><td>–no-create</td><td>不会建立文件</td></tr><tr><td>–help</td><td>列出指令格式</td></tr><tr><td>–version</td><td>列出版本讯息</td></tr></tbody></table><p>​            <strong>示例如下：</strong></p><p>​            （1）使用指令”touch”创建”text1.txt”文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost text2]<span class="hljs-comment"># cd exercise1</span><br>[root@localhost exercise1]<span class="hljs-comment"># touch text1.txt</span><br>[root@localhost exercise1]<span class="hljs-comment"># ls -l</span><br>总用量 0<br>-rw-r--r--. 1 root root 0 9月   7 13:44 text1.txt<br><span class="hljs-comment"># 当然touch可以一次创建多个文件，例如：touch text1.txt  text2.txt text3.txt ...</span><br>[root@localhost exercise1]<span class="hljs-comment"># touch text2.txt text3.txt</span><br>[root@localhost exercise1]<span class="hljs-comment"># ls -l</span><br>总用量 0<br>-rw-r--r--. 1 root root 0 9月   7 13:44 text1.txt<br>-rw-r--r--. 1 root root 0 9月   7 13:45 text2.txt<br>-rw-r--r--. 1 root root 0 9月   7 13:45 text3.txt<br><br><br><br></code></pre></td></tr></table></figure><p>​            （2）使用指令”touch”修改文件”text1.txt”的时间属性为当前系统时间，发现如果文件存在，这里直接是修改时间了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># touch text1.txt</span><br>[root@localhost exercise1]<span class="hljs-comment"># ls -l</span><br>总用量 0<br>-rw-r--r--. 1 root root 0 9月   7 13:46 text1.txt<br><span class="hljs-comment"># 发现时间是已经修改了</span><br></code></pre></td></tr></table></figure><p>​            （3）强制避免使用touch命令创建新文件   使用参数 -c</p><p>​                     有时，如果新文件不存在，则需要避免创建新文件。 在这种情况下，可以使用touch命令使用’-c’选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># ls</span><br>text1.txt  text2.txt  text3.txt<br>[root@localhost exercise1]<span class="hljs-comment"># touch -c text4.txt</span><br>[root@localhost exercise1]<span class="hljs-comment"># ls</span><br>text1.txt  text2.txt  text3.txt<br><br></code></pre></td></tr></table></figure><p>​            （4）更改文件的访问和修改时间         使用参数 -a</p><p>​                     touch命令的另一个用途是更改文件的访问时间和修改时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># stat text3.txt </span><br>  文件：<span class="hljs-string">&quot;text3.txt&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16626       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-09-07 14:04:07.539848285 +0800<br>最近更改：2020-09-07 14:04:07.539848285 +0800<br>最近改动：2020-09-07 14:04:07.539848285 +0800<br>创建时间：-<br><br>[root@localhost exercise1]<span class="hljs-comment"># touch -a text3.txt </span><br><br>[root@localhost exercise1]<span class="hljs-comment"># stat text3.txt </span><br>  文件：<span class="hljs-string">&quot;text3.txt&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16626       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-09-07 14:08:33.788865586 +0800<br>最近更改：2020-09-07 14:04:07.539848285 +0800<br>最近改动：2020-09-07 14:08:33.788865586 +0800<br>创建时间：-<br><br>我们看到先是使用<span class="hljs-built_in">stat</span>查看文件详细信息  最近访问和最近更改时间<br>当我们使用命令使用参数-a 对文件 text3.txt 做了一些操作 <span class="hljs-built_in">touch</span> -a text3.txt <br>再查看时间时，发现文件已经修改好了<br></code></pre></td></tr></table></figure><p>​            （4）仅更改此文件的修改时间          使用参数 -m</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># touch -m text3.txt </span><br>[root@localhost exercise1]<span class="hljs-comment"># stat text3.txt </span><br>  文件：<span class="hljs-string">&quot;text3.txt&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16626       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-09-07 14:08:33.788865586 +0800<br>最近更改：2020-09-07 14:15:59.782894567 +0800<br>最近改动：2020-09-07 14:15:59.782894567 +0800<br>创建时间：-<br><br></code></pre></td></tr></table></figure><p>​            （5）将访问和修改时间从一个文件复制到另一个文件   使用参数 -r</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># touch text3.txt  -r  text1.txt </span><br><br>[root@localhost exercise1]<span class="hljs-comment"># stat text1.txt </span><br>  文件：<span class="hljs-string">&quot;text1.txt&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16624       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-09-07 13:57:38.308822993 +0800<br>最近更改：2020-09-07 13:57:38.308822993 +0800<br>最近改动：2020-09-07 13:57:38.308822993 +0800<br>创建时间：-<br><br>[root@localhost exercise1]<span class="hljs-comment"># stat text3.txt </span><br>  文件：<span class="hljs-string">&quot;text3.txt&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16626       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-09-07 13:57:38.308822993 +0800<br>最近更改：2020-09-07 13:57:38.308822993 +0800<br>最近改动：2020-09-07 14:19:35.732908600 +0800<br>创建时间：-<br><br><span class="hljs-comment"># 输出显示text3.txt现在具有与text1.txt相同的访问和修改值</span><br></code></pre></td></tr></table></figure><p>​            （6）使用指定的时间戳创建新文件         使用参数-t</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># touch -t 2001011314.52 time.log</span><br><br>[root@localhost exercise1]<span class="hljs-comment"># stat time.log </span><br>  文件：<span class="hljs-string">&quot;time.log&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16627       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2020-01-01 13:14:52.000000000 +0800<br>最近更改：2020-01-01 13:14:52.000000000 +0800<br>最近改动：2020-09-07 14:26:23.916935124 +0800<br>创建时间：-<br><span class="hljs-comment"># 最近访问与最近更该时间为设定的时间 2020-01-01 13:14:52.000000000</span><br></code></pre></td></tr></table></figure><p>​            （7）将文件的时间戳更改为其他时间     使用参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># touch -c -t 1801011314.52 time.log</span><br><br>[root@localhost exercise1]<span class="hljs-comment"># stat time.log </span><br>  文件：<span class="hljs-string">&quot;time.log&quot;</span><br>  大小：0               块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768d      Inode：16627       硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2018-01-01 13:14:52.000000000 +0800<br>最近更改：2018-01-01 13:14:52.000000000 +0800<br>最近改动：2020-09-07 14:30:45.188952101 +0800<br>创建时间：-<br><span class="hljs-comment"># 使用参数修改为指定的时间戳</span><br></code></pre></td></tr></table></figure><h4 id="3、rm-命令"><a href="#3、rm-命令" class="headerlink" title="3、rm 命令"></a>3、rm 命令</h4><p><strong>rm</strong></p><p>​           <strong>作用：</strong>用于删除一个文件或者目录。</p><p>​           <strong>语法：</strong>rm [选项] 文件…</p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td>-i</td><td>删除前逐一询问确认</td></tr><tr><td>-f</td><td>即使原档案属性设为唯读，亦直接删除，无需逐一确认</td></tr><tr><td>-r</td><td>将目录及以下之档案亦逐一删除  (递归删除)</td></tr></tbody></table><p>​            （1）删除文件或者目录前提示  使用参数  -i</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># ls</span><br>text1.txt  text2.txt  time.log<br><br>[root@localhost exercise1]<span class="hljs-comment"># rm -i text2.txt</span><br><span class="hljs-built_in">rm</span>：是否删除普通空文件 <span class="hljs-string">&quot;text2.txt&quot;</span>？y<br>[root@localhost exercise1]<span class="hljs-comment"># ls</span><br>text1.txt  time.log<br><br><span class="hljs-comment"># 这里提示是否删除，输入 y确认</span><br></code></pre></td></tr></table></figure><p>​            （2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认   -rf</p><p>​                    我们先切换到上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost exercise1]<span class="hljs-comment"># cd ../</span><br><br>[root@localhost text2]<span class="hljs-comment"># ls</span><br>exercise1  exercise2  exercise3  exercise4<br>[root@localhost text2]<span class="hljs-comment"># rm -rf exercise1</span><br>[root@localhost text2]<span class="hljs-comment"># ls</span><br>exercise2  exercise3  exercise4<br>[root@localhost text2]<span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure><h4 id="4、rmdir-命令"><a href="#4、rmdir-命令" class="headerlink" title="4、rmdir 命令"></a>4、rmdir 命令</h4><p>rmdir</p><p>​           <strong>作用：</strong>用于删除空的目录。从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p>​           <strong>语法：</strong>rmdir [-p] dirName</p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td>-p</td><td>当子目录被删除后使它也成为空目录的话，则顺便一并删除。</td></tr></tbody></table><p>​           注意（不能删除非空目录）</p><p>​            （1）正常删除目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost text2]<span class="hljs-comment"># ls</span><br>exercise2  exercise3  exercise4<br><br>[root@localhost text2]<span class="hljs-comment"># rmdir exercise2</span><br>[root@localhost text2]<span class="hljs-comment"># ls</span><br>exercise3  exercise4<br><br>[root@localhost text2]<span class="hljs-comment"># rmdir exercise3</span><br>[root@localhost text2]<span class="hljs-comment"># ls</span><br>exercise4<br><br><span class="hljs-comment"># 这里删除空目录</span><br></code></pre></td></tr></table></figure><p>​            （1）工作目录下的 text1 目录中，删除名为 text2 的子目录。若 text2 删除后，text1 目录成为空目录，则 text1 亦予删除，类推</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -R mydir/</span><br>mydir/:<br>text1<br><br>mydir/text1:<br>text2<br><br>mydir/text1/text2:<br><br><br>[root@localhost ~]<span class="hljs-comment"># rmdir -p mydir/text1/text2/</span><br>[root@localhost ~]<span class="hljs-comment"># ls</span><br>anaconda-ks.cfg<br><br></code></pre></td></tr></table></figure><h4 id="5、mv-命令"><a href="#5、mv-命令" class="headerlink" title="5、mv 命令"></a>5、mv 命令</h4><p>mv</p><p>​           <strong>作用：</strong>用来为文件或目录改名、或将文件或目录移入其它位置。</p><p>​           <strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> [options] <span class="hljs-built_in">source</span> dest<br><span class="hljs-built_in">mv</span> [options] <span class="hljs-built_in">source</span>... directory<br></code></pre></td></tr></table></figure><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td>-i</td><td>若指定目录已有同名文件，则先询问是否覆盖旧文件;</td></tr><tr><td>-f</td><td>在 mv 操作要覆盖某已有的目标文件时不给任何指示</td></tr></tbody></table><p>​           mv参数设置与运行结果</p><table><thead><tr><th align="left">命令格式</th><th align="left">运行结果</th></tr></thead><tbody><tr><td align="left">mv 文件名 文件名</td><td align="left">将源文件名改为目标文件名</td></tr><tr><td align="left">mv 文件名 目录名</td><td align="left">将文件移动到目标目录</td></tr><tr><td align="left">mv 目录名 目录名</td><td align="left">目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</td></tr><tr><td align="left">mv 目录名 文件名</td><td align="left">出错</td></tr></tbody></table><p>​            先给个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -R mydir/</span><br>mydir/:<br>test1  test2<br><br>mydir/test1:<br>text1.log  text1.txt  text2.log<br><br>mydir/test2:<br><br></code></pre></td></tr></table></figure><p>​            （1）将文件 text1.log 重命名为 text2.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost test1]<span class="hljs-comment"># ls</span><br>text1.log  text1.txt  text2.log<br><br>[root@localhost test1]<span class="hljs-comment"># mv text1.log text2.txt</span><br>[root@localhost test1]<span class="hljs-comment"># ls</span><br>text1.txt  text2.log  text2.txt<br><br><br></code></pre></td></tr></table></figure><p>​            （2）将文件 text1.txt    text2.log    text2.txt   移动到mydir的 test2 目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost test1]<span class="hljs-comment"># mv text1.txt  text2.log  text2.txt  ../test2</span><br>[root@localhost test1]<span class="hljs-comment"># ls</span><br>[root@localhost test1]<span class="hljs-comment"># cd ../test2</span><br>[root@localhost test2]<span class="hljs-comment"># ls</span><br>text1.txt  text2.log  text2.txt<br><br></code></pre></td></tr></table></figure><p>​            （3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖  使用参数 -i 询问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost test2]<span class="hljs-comment"># ls</span><br>text1.txt  text2.log  text2.txt<br><br>[root@localhost test2]<span class="hljs-comment"># mv -i text2.txt text1.txt </span><br><span class="hljs-built_in">mv</span>：是否覆盖<span class="hljs-string">&quot;text1.txt&quot;</span>？ y<br>[root@localhost test2]<span class="hljs-comment"># ls</span><br>text1.txt  text2.log<br>[root@localhost test2]<span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure><p>​            （4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost test2]<span class="hljs-comment"># mv * ../</span><br>[root@localhost test2]<span class="hljs-comment"># ls ../</span><br>test1  test2  text1.txt  text2.log<br><br></code></pre></td></tr></table></figure><h4 id="6、cp-命令"><a href="#6、cp-命令" class="headerlink" title="6、cp 命令"></a>6、cp 命令</h4><p>cp</p><p>​           <strong>作用：</strong>用于复制文件或目录。</p><p>​           <strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> [options] <span class="hljs-built_in">source</span> dest<br><br><span class="hljs-built_in">cp</span> [options] <span class="hljs-built_in">source</span>... directory<br></code></pre></td></tr></table></figure><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数功能描述</th></tr></thead><tbody><tr><td>-a</td><td>此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合</td></tr><tr><td>-d</td><td>复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</td></tr><tr><td>-f</td><td>覆盖已经存在的目标文件而不给出提示。</td></tr><tr><td>-i</td><td>与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</td></tr><tr><td>-p</td><td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</td></tr><tr><td>-r</td><td>若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</td></tr><tr><td>-l</td><td>不复制文件，只是生成链接文件。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 常用的一些有以下参数</span><br>-i 提示<br>-r 复制目录及目录内所有项目<br>-a 复制的文件与原文件时间一样<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -R mydir/</span><br>mydir/:<br>test1  test2  text1.txt  text2.log<br><br>mydir/test1:<br><br>mydir/test2:<br><br><span class="hljs-comment"># 目录文件环境</span><br></code></pre></td></tr></table></figure><p>​            （1）复制 text1.txt 到 test1 目录下，保持原文件时间，如果原文件存在提示是否覆盖。使用参数 -ai</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cp -ai mydir/text1.txt  mydir/test1</span><br>[root@localhost ~]<span class="hljs-comment"># ls mydir/test1</span><br>text1.txt<br><br></code></pre></td></tr></table></figure><p>​            （2）为 text1.txt 建议一个链接（快捷方式） 使用参数 -s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cp -s mydir/text2.log  link_text2</span><br>[root@localhost ~]<span class="hljs-comment"># ls</span><br>anaconda-ks.cfg  link_text2  mydir<br><br><span class="hljs-comment"># 注意（只能于当前目录中创建相对的符号链接）</span><br></code></pre></td></tr></table></figure><p>​            （3）将当前或者制定的目录下的所有文件复制到新目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cp -r mydir/ test</span><br><br>[root@localhost ~]<span class="hljs-comment"># ls -R test</span><br><span class="hljs-built_in">test</span>:<br>test1  test2  text1.txt  text2.log<br><br><span class="hljs-built_in">test</span>/test1:<br>text1.txt<br><br><span class="hljs-built_in">test</span>/test2:<br>test1  test2<br><br><span class="hljs-built_in">test</span>/test2/test1:<br>text1.txt<br><br><span class="hljs-built_in">test</span>/test2/test2:<br><br><br>[root@localhost ~]<span class="hljs-comment"># ls -R mydir/</span><br>mydir/:<br>test1  test2  text1.txt  text2.log<br><br>mydir/test1:<br>text1.txt<br><br>mydir/test2:<br>test1  test2<br><br>mydir/test2/test1:<br>text1.txt<br><br>mydir/test2/test2:<br><br><span class="hljs-comment"># 两个文件一模一样的内容</span><br><br></code></pre></td></tr></table></figure><h4 id="7、cat命令"><a href="#7、cat命令" class="headerlink" title="7、cat命令"></a>7、cat命令</h4><p>cat</p><p>​           <strong>作用：</strong>用于连接文件并打印到标准输出设备上</p><p>​           <strong>语法：</strong>cat [-AbeEnstTuv] [–help] [–version] fileName</p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>-n</strong></td><td><strong>–number</strong></td><td>由 1 开始对所有输出的行数编号</td></tr><tr><td><strong>-b</strong></td><td><strong>–number-nonblank</strong></td><td>和 -n 相似，只不过对于空白行不编号</td></tr><tr><td><strong>-s</strong></td><td><strong>–squeeze-blank</strong></td><td>当遇到有连续两行以上的空白行，就代换为一行的空白行</td></tr><tr><td><strong>-v</strong></td><td><strong>–show-nonprinting</strong></td><td>使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外</td></tr><tr><td><strong>-E</strong></td><td><strong>–show-ends</strong></td><td>在每行结束处显示 $</td></tr><tr><td><strong>-T</strong></td><td><strong>–show-tabs</strong></td><td>将 TAB 字符显示为 ^I</td></tr><tr><td><strong>-A</strong></td><td><strong>–show-all</strong></td><td>等价于 -vET</td></tr><tr><td><strong>-e</strong></td><td></td><td>等价于”-vE”选项</td></tr><tr><td><strong>-t</strong></td><td></td><td>等价于”-vT”选项</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">参考环境，事先编辑好的文本<br><br>[root@localhost ~]<span class="hljs-comment"># vi mydir/text1.txt </span><br><br><span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br><span class="hljs-comment"># 按i键进入编辑界面</span><br><span class="hljs-comment"># 输入对应的内容后</span><br><span class="hljs-comment"># 按ESC退出编辑模式</span><br><span class="hljs-comment"># 按住shift+；进入命令行界面</span><br><span class="hljs-comment"># 输入wq回车接口保存退出</span><br><br><br></code></pre></td></tr></table></figure><p>​            （1）显示整个文件内容 使用 cat 正常进查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat mydir/text1.txt</span><br><span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br><span class="hljs-comment"># 按i键进入编辑界面</span><br><span class="hljs-comment"># 输入对应的内容后</span><br><span class="hljs-comment"># 按ESC退出编辑模式</span><br><span class="hljs-comment"># 按住shift+；进入命令行界面</span><br><span class="hljs-comment"># 输入wq回车接口保存退出</span><br></code></pre></td></tr></table></figure><p>​            （2）把   text1.txt   的文档内容加上行号后输入 text2.log  这个文档里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># cat -n text1.txt &gt; text2.log </span><br>[root@localhost mydir]<span class="hljs-comment"># cat text2.log </span><br>     1  <span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br>     2  <span class="hljs-comment"># 按i键进入编辑界面</span><br>     3  <span class="hljs-comment"># 输入对应的内容后</span><br>     4  <span class="hljs-comment"># 按ESC退出编辑模式</span><br>     5  <span class="hljs-comment"># 按住shift+；进入命令行界面</span><br>     6  <span class="hljs-comment"># 输入wq回车接口保存退出</span><br><br><br></code></pre></td></tr></table></figure><p>​            （3）把 text1.txt 和 text2.txt 的文档内容加上行号（空白行不加）之后将内容附加到 text3.txt 文档里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># cat -b text1.txt  text2.log &gt;&gt; text3.txt</span><br>[root@localhost mydir]<span class="hljs-comment"># cat text3.txt</span><br>     1  <span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br>     2  <span class="hljs-comment"># 按i键进入编辑界面</span><br>     3  <span class="hljs-comment"># 输入对应的内容后</span><br>     4  <span class="hljs-comment"># 按ESC退出编辑模式</span><br>     5  <span class="hljs-comment"># 按住shift+；进入命令行界面</span><br>     6  <span class="hljs-comment"># 输入wq回车接口保存退出</span><br>     7       1  <span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br>     8       2  <span class="hljs-comment"># 按i键进入编辑界面</span><br>     9       3  <span class="hljs-comment"># 输入对应的内容后</span><br>    10       4  <span class="hljs-comment"># 按ESC退出编辑模式</span><br>    11       5  <span class="hljs-comment"># 按住shift+；进入命令行界面</span><br>    12       6  <span class="hljs-comment"># 输入wq回车接口保存退出</span><br></code></pre></td></tr></table></figure><p>​            （3）清空 &#x2F;mydir&#x2F;text1.txt 文档内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># cat /dev/null &gt; text1.txt</span><br>[root@localhost mydir]<span class="hljs-comment"># cat text1.txt</span><br>[root@localhost mydir]<span class="hljs-comment"># ls</span><br>test1  test2  text1.txt  text2.log  text3.txt<br><br></code></pre></td></tr></table></figure><h4 id="8、more-命令"><a href="#8、more-命令" class="headerlink" title="8、more 命令"></a>8、more 命令</h4><p>more</p><p>​           <strong>作用：</strong>类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h </p><p>​           <strong>语法：</strong>more [-dlfpcsu] [-num] [+&#x2F;pattern] [+linenum] [fileNames..]</p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数功能描述</th></tr></thead><tbody><tr><td>-num</td><td>一次显示的行数</td></tr><tr><td>-d</td><td>提示使用者，在画面下方显示 [Press space to continue, ‘q’ to quit.] ，<br />如果使用者按错键，则会显示 [Press ‘h’ for instructions.] 而不是 ‘哔’ 声</td></tr><tr><td>-l</td><td>取消遇见特殊字元 ^L（送纸字元）时会暂停的功能</td></tr><tr><td>-f</td><td>计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）</td></tr><tr><td>-p</td><td>不以卷动的方式显示每一页，而是先清除萤幕后再显示内容</td></tr><tr><td>-c</td><td>跟 -p 相似，不同的是先显示内容再清除其他旧资料</td></tr><tr><td>-s</td><td>当遇到有连续两行以上的空白行，就代换为一行的空白行</td></tr><tr><td>-u</td><td>不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）</td></tr><tr><td>+&#x2F;pattern</td><td>在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示</td></tr><tr><td>+num</td><td>从第 num 行开始显示</td></tr><tr><td>fileNames</td><td>需要显示内容的文档，可为复数个数</td></tr></tbody></table><p>​           常用的操作命令</p><table><thead><tr><th>按键</th><th>按键功能描述</th></tr></thead><tbody><tr><td>Enter</td><td>向下 n 行，需要定义。默认为 1 行</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>空格键</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>&#x3D;</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr><tr><td>V</td><td>调用vi编辑器</td></tr><tr><td>!命令</td><td>调用Shell，并执行命令</td></tr><tr><td>q</td><td>退出more</td></tr></tbody></table><p>​            （1）显示文件中从第3行起的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># more +3 text3.txt</span><br>     3  <span class="hljs-comment"># 输入对应的内容后</span><br>     4  <span class="hljs-comment"># 按ESC退出编辑模式</span><br>     5  <span class="hljs-comment"># 按住shift+；进入命令行界面</span><br>     6  <span class="hljs-comment"># 输入wq回车接口保存退出</span><br>     7       1  <span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br>     8       2  <span class="hljs-comment"># 按i键进入编辑界面</span><br>     9       3  <span class="hljs-comment"># 输入对应的内容后</span><br>    10       4  <span class="hljs-comment"># 按ESC退出编辑模式</span><br>    11       5  <span class="hljs-comment"># 按住shift+；进入命令行界面</span><br>    12       6  <span class="hljs-comment"># 输入wq回车接口保存退出</span><br><br></code></pre></td></tr></table></figure><p>​            （2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># ls -l / | more -5</span><br>总用量 20<br>lrwxrwxrwx.   1 root root    7 8月  31 15:48 bin -&gt; usr/bin<br>dr-xr-xr-x.   5 root root 4096 8月  31 15:58 boot<br>drwxr-xr-x.  20 root root 3240 9月   5 13:07 dev<br>drwxr-xr-x.  75 root root 8192 9月   7 10:30 etc<br>--More--<br><br><span class="hljs-comment"># 空格会显示下5行</span><br><span class="hljs-comment"># 回车会显示下1行</span><br></code></pre></td></tr></table></figure><h4 id="9、less-命令"><a href="#9、less-命令" class="headerlink" title="9、less 命令"></a>9、less 命令</h4><p>less</p><p>​           <strong>作用：</strong>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p>​           <strong>语法：</strong>less [参数] 文件 </p><p>​           <strong>命令参数：</strong></p><table><thead><tr><th>参数</th><th>参数功能描述</th></tr></thead><tbody><tr><td>-i</td><td>忽略搜索时的大小写</td></tr><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-o</td><td>&lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</td></tr><tr><td>-s</td><td>显示连续空行为一行</td></tr><tr><td>&#x2F;字符串：</td><td>向下搜索“字符串”的功能</td></tr><tr><td>?字符串：</td><td>向上搜索“字符串”的功能</td></tr><tr><td>n</td><td>重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td>N</td><td>反向重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td>-x &lt;数字&gt;</td><td>将“tab”键显示为规定的数字空格</td></tr><tr><td>b</td><td>向后翻一页</td></tr><tr><td>d</td><td>向后翻半页</td></tr><tr><td>h</td><td>显示帮助界面</td></tr><tr><td>Q</td><td>退出less 命令</td></tr><tr><td>u</td><td>向前滚动半页</td></tr><tr><td>y</td><td>向前滚动一行</td></tr><tr><td>空格键</td><td>滚动一行</td></tr><tr><td>回车键</td><td>滚动一页</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页</td></tr></tbody></table><p>​            （1）查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># less text3.txt </span><br>     1  <span class="hljs-comment"># 编辑文本，使用vi打开文本</span><br>     2  <span class="hljs-comment"># 按i键进入编辑界面</span><br>     ...省略...<br>     <br>     <br><span class="hljs-comment"># 进入后查看，Q键退出界面</span><br></code></pre></td></tr></table></figure><p>​            （2）ps查看进程信息并通过less分页显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># less text3.txt </span><br>UID         PID   PPID  C STIME TTY          TIME CMD<br>root          1      0  0 05:06 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22<br>root          2      0  0 05:06 ?        00:00:00 [kthreadd]<br>...省略...<br></code></pre></td></tr></table></figure><p>​            （3）查看命令历史使用记录并通过less分页显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># history | less</span><br>    1  <span class="hljs-built_in">exit</span><br>    2  reboot<br>    3  shutdowm -r now<br>    4  poweroff<br>    5  <span class="hljs-built_in">cd</span> <br><br>...省略...<br></code></pre></td></tr></table></figure><p>​            （4）查看多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost mydir]<span class="hljs-comment"># less text3.txt </span><br><br><span class="hljs-comment"># 此时如果需要查看多个文件可以使用 可以输入shift+；进入命令行模式</span><br><span class="hljs-comment"># 使用 p 和 n 进行上下页面翻页查看</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">附加备注<br>1.全屏导航<br><br>ctrl + F - 向前移动一屏<br>ctrl + B - 向后移动一屏<br>ctrl + D - 向前移动半屏<br>ctrl + U - 向后移动半屏<br>2.单行导航<br><br>j - 向前移动一行<br>k - 向后移动一行<br>3.其它导航<br><br>G - 移动到最后一行<br>g - 移动到第一行<br>q / ZZ - 退出 less 命令<br>4.其它有用的命令<br><br>v - 使用配置的编辑器编辑当前文件<br>h - 显示 less 的帮助文档<br>&amp;pattern - 仅显示匹配模式的行，而不是整个文件<br>5.标记导航<br><br>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：<br><br>ma - 使用 a 标记文本的当前位置<br><span class="hljs-string">&#x27;a - 导航到标记 a 处</span><br><span class="hljs-string">Linux 命令大全 Linux 命令大全</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>编程学习</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的基本命令-1</title>
    <link href="/2024/01/07/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-1/"/>
    <url>/2024/01/07/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h2><p>熟悉一些入门的Linux命令</p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>作用: 用于显示制定工作目录下的内容(列出目前工作目录所含的文件及子目录)</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> [-alrtAFR](选项) [name...](参数)<br></code></pre></td></tr></table></figure><p>参数：</p><p><code>-a</code> 显示所有文件及目录 (ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出) 示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -a</span><br>.  ..  anaconda-ks.cfg  .bash_history  .bash_logout  .bash_profile  .bashrc  .cshrc  .tcshrc<br></code></pre></td></tr></table></figure><p><code>-l</code> 除文件名称外，将文件型态、权限、拥有者、文件大小等资讯详细列出  示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -l</span><br>总用量 4<br>-rw-------. 1 root root 1437 8月  31 15:54 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><p><code>-r</code> 将文件以相反次序显示(原定依英文字母次序) 示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -ra</span><br>.tcshrc  .cshrc  .bashrc  .bash_profile  .bash_logout  .bash_history  anaconda-ks.cfg  ..  .<br></code></pre></td></tr></table></figure><p><code>-t</code> 将文件依建立时间之先后次序列出   示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -lt</span><br>总用量 4<br>-rw-------. 1 root root 1437 8月  31 15:54 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><p><code>-A</code> 同 <code>-a</code> ，但不列出 “.” (目前目录) 及 “..” (父目录)   示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -A</span><br>anaconda-ks.cfg  .bash_history  .bash_logout  .bash_profile  .bashrc  .cshrc  .tcshrc<br></code></pre></td></tr></table></figure><p><code>-F</code> 在列出的文件名称后加一个符号；例如可执行文件则加 “*”, 目录则加 “&#x2F;“   示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -F /home</span><br>msb123/<br></code></pre></td></tr></table></figure><p><code>-R</code> 若目录下有文件，则目录下的文件依序(递归)列出  示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls -R /home</span><br>/home:<br>msb123<br><br>/home/msb123:<br></code></pre></td></tr></table></figure><p>常用组合</p><blockquote><ul><li>查看文件详情：<code>ls -l</code> 或 <code>ll</code></li><li>增强对文件大小易读性，以人类可读的形式显示文件大小： <code>ls -lh</code></li><li>对文件或者目录进行从大到小的排序：<code>ls -lhs</code></li><li>查看当前目录下的所有文件或者目录，包括隐藏文件： <code>ls -la</code></li><li>只查看当前目录下的目录文件： <code>ls -d</code></li><li>按照时间顺序查看，从上到倒下时间越来越近： <code>ls -ltr</code></li><li>查看文件在对应的inode信息：<code>ls -li</code></li></ul></blockquote><h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>作用: 变换当前目录到dir。默认目录为home，可以使用绝对路径或相对路径。</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [<span class="hljs-built_in">dir</span>](路径)<br></code></pre></td></tr></table></figure><p>示例:</p><p>跳转到用户目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cd /home/bei</span><br>[root@localhost bei]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>跳转到home目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost bei]<span class="hljs-comment"># cd ~</span><br>[root@localhost ~]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>跳转到上次所在的目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cd -</span><br>/home/bei<br>[root@localhost bei]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>跳转到父目录(也可以直接使用<code>cd ..</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost bei]<span class="hljs-comment"># cd ./..</span><br>[root@localhost home]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>跳转到当前目录的上两层目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost bei]<span class="hljs-comment"># cd ../..</span><br>[root@localhost /]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>作用：可立刻得知目前所在的工作目录的绝对路径名称.</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>查看当前所在目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># cd /home</span><br>[root@localhost home]<span class="hljs-comment"># pwd</span><br>/home<br>[root@localhost home]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>编程学习</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本概念</title>
    <link href="/2024/01/07/Linux%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/01/07/Linux%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="用户目录"><a href="#用户目录" class="headerlink" title="用户目录"></a>用户目录</h3><p><strong>用户目录：位于 &#x2F;home&#x2F;user，称之为用户工作目录或家目录,表示方式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在home有一个user  这里就是之前创建的test用户</span><br>[root@localhost ~]<span class="hljs-comment"># cd /home</span><br>[root@localhost home]<span class="hljs-comment"># ls</span><br><span class="hljs-built_in">test</span><br><br><span class="hljs-comment"># 使用~回到root目录，使用/是回到根目录下</span><br>[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># cd ~</span><br>[root@localhost ~]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h3 id="登录信息"><a href="#登录信息" class="headerlink" title="登录信息"></a>登录信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>Linux的bash解析器终端用来显示主机名和当前用户的标识；</p><p><code>root</code>表示当前用户叫root（系统管理员账户）</p><p><code>localhost</code>表示当前使用的主机名叫localhost（没有设置系统名字的时候默认名称是localhost）</p><p><code>/</code>表示你当前所处的目录位置 (这里的’&#x2F;‘表示你当前在根目录下)</p><p><code>#</code> <code>普通用户</code>登录显示的就是<code>$</code>，而用<code>root用户</code>登录显示的就是<code>#</code>号。</p><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>从&#x2F;目录开始描述的路径为绝对路径，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># cd /home/test</span><br>[root@localhost /]<span class="hljs-comment"># ls /usr</span><br></code></pre></td></tr></table></figure><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>从当前位置开始描述的路径为相对路径，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># cd ../../</span><br>[root@localhost /]<span class="hljs-comment"># ls abc/def</span><br></code></pre></td></tr></table></figure><h4 id="和"><a href="#和" class="headerlink" title=".和.."></a>.和..</h4><p>每个目录下都有<code>.</code>和<code>..</code></p><p><code>. </code>表示当前目录</p><p><code>..</code> 表示上一级目录，即父目录</p><p>例如这里切换路径时候:</p><p>从 &#x2F; 根目录切换到 home目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># cd home</span><br></code></pre></td></tr></table></figure><p>确认路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost home]<span class="hljs-comment"># pwd</span><br>/home<br></code></pre></td></tr></table></figure><p>切换到当前目录<code>cd .</code> → 目录无变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost home]<span class="hljs-comment"># cd .</span><br>[root@localhost home]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>切换到父目录<code>cd ..</code> → 目录回到上一级根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost home]<span class="hljs-comment"># cd ..</span><br>[root@localhost /]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>: </p><p>根目录下的<code>.</code>和<code>..</code>都表示当前目录</p></blockquote><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>文件权限就是文件的访问控制权限，即哪些用户和组群可以访问文件以及可以执行什么样的操作。</p><p>Unix&#x2F;Linux系统是一个典型的多用户系统，不同的用户处于不同的地位，对文件和目录有不同的访问权限。为了保护系统的安全性Unix&#x2F;Linux系统除了对用户权限作了严格的界定外，还在用户身份认证、访问控制、传输安全、文件读写权限等方面作了周密的控制。</p><p>在 Unix&#x2F;Linux中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录。</p><h4 id="访问用户"><a href="#访问用户" class="headerlink" title="访问用户"></a>访问用户</h4><p>通过设定权限可以从以下三种访问方式限制访问权限：</p><ol><li><p>只允许用户自己访问（所有者） 所有者就是创建文件的用户，用户是所有用户所创建文件的所有者，用户可以允许所在的用户组能访问用户的文件。</p></li><li><p>允许一个预先指定的用户组中的用户访问（用户组） 用户都组合成用户组，例如，某一类或某一项目中的所有用户都能够被系统管理员归为一个用户组，一个用户能够授予所在用户组的其他成员的文件访问权限。</p></li><li><p>允许系统中的任何用户访问（其他用户） 用户也将自己的文件向系统内的所有用户开放，在这种情况下，系统内的所有用户都能够访问用户的目录或文件。在这种意义上，系统内的其他所有用户就是 other 用户类</p></li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><p>用户能够控制一个给定的文件或目录的访问程度，一个文件或目录可能有读、写及执行权限：</p><ul><li><p>读权限(r): 对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。</p></li><li><p>写权限(w): 对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</p></li><li><p>可执行权限(x): 对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</p></li></ul><blockquote><p><strong>注意</strong>：</p><p>通常，Unix&#x2F;Linux系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># ls -l</span><br>总用量 20<br>lrwxrwxrwx.   1 root root    7 8月  31 15:48 bin -&gt; usr/bin<br>dr-xr-xr-x.   5 root root 4096 8月  31 15:58 boot<br>...<br></code></pre></td></tr></table></figure><p>拆解结构，这里面我只列了根目录下的一部分内容</p><blockquote><p>l rwx rwx rwx<br>d r-x r-x r-x</p></blockquote><p>首先第一个字母 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><p><code>d</code> 表示目录<br><code>l</code> 表示为链接文档(link file)<br><code>-</code> 表示为文件<br><code>&#39;</code> 表示为装置文件里面的可供储存的接口设备(可随机存取装置)<br><code>c</code> 表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)</p><p>其次接下来的字符中，以三个为一组，且均为 [ rwx ] 的三个参数的组合</p><p><code>r</code> 代表可读(read)<br><code>w</code> 代表可写(write)<br><code>x</code> 代表可执行(execute)<br><code>-</code> 代表没有权限</p><blockquote><p><strong>注意</strong>:</p><p>这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]。</p></blockquote><p>三组分别代表的用户:</p><ol><li><p>所有者 - 所有者表示该文件的所有者</p></li><li><p>用户组 - 表示当前用户再同一组</p></li><li><p>其他用户 - 允许系统中的任何用户访问，系统内的其他所有用户就是other用户类</p></li></ol><h4 id="文件属主与属组"><a href="#文件属主与属组" class="headerlink" title="文件属主与属组"></a>文件属主与属组</h4><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost /]<span class="hljs-comment"># ls -l</span><br>总用量 20<br>...<br>dr-xr-xr-x.   5 root root 4096 8月  31 15:58 boot<br>...<br><br>[root@localhost /]<span class="hljs-comment"># cd /home</span><br>[root@localhost home]<span class="hljs-comment"># ls -l</span><br>总用量 0<br>drwx------. 2 msb123 msb123 83 9月   2 15:54 <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>在以上实例中，test 文件是一个目录文件，属主和属组都为 test，属主有可读、可写、可执行的权限；与属主同组的用户无权限读写执行；其他用户也无权限读写执行</p><blockquote><p>注意: 对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>编程学习</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件结构</title>
    <link href="/2024/01/07/Linux%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2024/01/07/Linux%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h1><h2 id="Linux文件结构"><a href="#Linux文件结构" class="headerlink" title="Linux文件结构"></a>Linux文件结构</h2><p>CentOS和Windows不一样, 它没有盘符(C, D)的概念, 这有一个根目录&#x2F;, 所有文件都在下面.</p><p>输入<code>ls /</code>可以查看根目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls /</span><br>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br></code></pre></td></tr></table></figure><table><thead><tr><th>目录</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>bin</td><td>存放普通用户可执行的指令</td><td>即使在单用户模式下也能够执行处理</td></tr><tr><td>boot</td><td>开机引导目录</td><td>包括Linux内核文件与开机所需要的文件</td></tr><tr><td>dev</td><td>设备目录</td><td>所有的硬件设备及周边均放置在这个设备目录中</td></tr><tr><td>etc</td><td>各种配置文件目录</td><td>大部分配置属性均存放在这里</td></tr><tr><td>lib&#x2F;lib64</td><td>开机时常用的动态链接库</td><td>bin及sbin指令也会调用对应的lib库</td></tr><tr><td>media</td><td>可移除设备挂载目录</td><td>类似软盘 U盘 光盘等临时挂放目录</td></tr><tr><td>mnt</td><td>用户临时挂载其他的文件系统</td><td>额外的设备可挂载在这里,相对临时而言</td></tr><tr><td>opt</td><td>第三方软件安装目录</td><td>现在习惯性的放置在&#x2F;usr&#x2F;local中</td></tr><tr><td>proc</td><td>虚拟文件系统</td><td>通常是内存中的映射,特别注意在误删除数据文件后，比如DB，只要系统不重启,还是有很大几率能将数据找回来</td></tr><tr><td>root</td><td>系统管理员主目录</td><td>除root之外,其他用户均放置在&#x2F;home目录下</td></tr><tr><td>run</td><td>系统运行是所需文件</td><td>以前防止在&#x2F;var&#x2F;run中,后来拆分成独立的&#x2F;run目录。重启后重新生成对应的目录数据</td></tr><tr><td>sbin</td><td>只有root才能运行的管理指令</td><td>跟bin类似,但只属于root管理员</td></tr><tr><td>srv</td><td>服务启动后需要访问的数据目录</td><td></td></tr><tr><td>sys</td><td>跟proc一样虚拟文件系统</td><td>记录核心系统硬件信息</td></tr><tr><td>tmp</td><td>存放临时文件目录</td><td>所有用户对该目录均可读写</td></tr><tr><td>usr</td><td>应用程序放置目录</td><td></td></tr><tr><td>var</td><td>存放系统执行过程经常改变的文件</td><td></td></tr></tbody></table><p> 在 Linux 系统中，有几个比较重要的目录，平时需要注意不要误删除或者随意更改内部文件。</p><p>​        <strong>&#x2F;etc</strong>： 是系统中的配置文件，如果更改了该目录下的某个文件可能会导致系统不能启动。</p><p>​        <strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在&#x2F;bin&#x2F;ls 目录下的。</p><p>​        值得提出的是，&#x2F;bin, &#x2F;usr&#x2F;bin 是给系统用户使用的指令（除root外的通用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给root使用的指令。</p><p>​        <strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在&#x2F;var&#x2F;log 目录下，另外mail的预设放置也是在这里。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>编程学习</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux概述</title>
    <link href="/2024/01/07/Linux%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/01/07/Linux%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h2><h4 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h4><p>​        内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><p>​        Linux内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些bug或加入一些新的驱动程序。<br><span class="hljs-bullet">- </span>开发版：由于要试验各种解决方案，所以变化很快。<br></code></pre></td></tr></table></figure><p>​        内核源码网址：<a href="http://www.kernel.org/">http://www.kernel.org</a> 所有来自全世界的对Linux源码的修改最终都会汇总到这个网站，由Linus领导的开源社区对其进行甄别和修改最终决定是否进入到Linux主线内核源码中。</p><p>​        Linux发行版 (也被叫做 GNU&#x2F;Linux 发行版) 通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。</p><table><thead><tr><th>排行</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><strong>MX Linux</strong></td><td><strong>基于Debian和antiX</strong></td></tr><tr><td>2</td><td><strong>Linux Mint</strong></td><td><strong>基于Ubuntu和Debian</strong></td></tr><tr><td>3</td><td><strong>Ubuntu</strong></td><td><strong>顶级Linux发行版之一</strong></td></tr><tr><td>4</td><td><strong>Elementary OS</strong></td><td><strong>基于Debian</strong></td></tr><tr><td>5</td><td><strong>Manjaro Linux</strong></td><td><strong>基于Arch Linux</strong></td></tr><tr><td>6</td><td><strong>Zorin OS</strong></td><td><strong>基于Debian</strong></td></tr><tr><td>7</td><td><strong>Fedora</strong></td><td><strong>软件技术方面处于领先地位</strong></td></tr><tr><td>8</td><td><strong>Debian</strong></td><td><strong>设计得非常稳定</strong></td></tr><tr><td>9</td><td><strong>CentOS</strong></td><td><strong>基于Fedora和Red Hat的企业最佳Linux</strong></td></tr><tr><td>10</td><td><strong>Kali Linux</strong></td><td><strong>基于Debian</strong></td></tr></tbody></table><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>CentOS（Community Enterprise Operating System，中文意思是社区企业操作系统）是<a href="https://baike.baidu.com/item/Linux/27050?fromModule=lemma_inlink">Linux</a>发行版之一，是免费的、开源的、可以重新分发的<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/4581071?fromModule=lemma_inlink">开源操作系统</a> [1]。</p><p>CentOS Linux发行版是一个稳定的，可预测的，可管理的和可复现的平台，源于[Red Hat Enterprise Linux](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat Enterprise Linux&#x2F;10770503?fromModule&#x3D;lemma_inlink)（<a href="https://baike.baidu.com/item/RHEL/2767838?fromModule=lemma_inlink">RHEL</a>）依照<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160?fromModule=lemma_inlink">开放源代码</a>（大部分是GPL开源协议）规定释出的源码所编译而成。</p><p>自2004年3月以来，CentOS Linux一直是社区驱动的<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069?fromModule=lemma_inlink">开源项目</a>，旨在与<a href="https://baike.baidu.com/item/RHEL/2767838?fromModule=lemma_inlink">RHEL</a>在功能上兼容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">Linux能做什么？<br><br>Linux可作为企业级服务器，或嵌入式开发平台也包含个人桌面系统。包含虚拟化、数据库服务器、Web服务器、开发平台等等<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">哪些人要学习Linux？<br><br>Linux管理员，oracle管理员，网络工程师，程序开发者等等。Linux系统涉及方面非常广泛，生态也越来越强大，非常适合大家学习<br></code></pre></td></tr></table></figure><p>​    <strong>个人桌面领域的应用</strong></p><p>​        此领域是传统linux应用最薄弱的环节，传统linux由于界面简单、操作复杂、应用软件少的缺点，一直被windows所压制，但近些年来随着ubuntu、fedora等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，linux在个人桌面领域的占有率在逐渐的提高</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">典型代表：ubuntu、fedora、suse linux<br></code></pre></td></tr></table></figure><p>​    <strong>服务器领域</strong></p><p>​        linux在服务器领域的应用是其重要分支</p><p>​        linux免费、稳定、高效等特点在这里得到了很好的体现，但早期因为维护、运行等原因同样受到了很大的限制，但近些年来linux服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">典型代表： Red Hat公司的<span class="hljs-keyword">AS</span>系列<br>          完全开源的debian系列<br>          suse EnterPrise <span class="hljs-number">11</span>系列等<br></code></pre></td></tr></table></figure><p><strong>嵌入式领域</strong></p><p>​        近些年来linux在嵌入式领域的应用得到了飞速的提高</p><p>​        linux运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百KB等特点，使其近些年来在嵌入式领域的应用得到非常大的提高</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">小贴士：Minix没有火起来的原因<br><br><span class="hljs-keyword">Andrew </span>Tanenbaum教授在发布Minix3时，接受采访时他透露MINIX3将移植到ARM架构。他说，MINIX3没有统治世界是源于他在<span class="hljs-number">1992</span>年犯下的一个错误，当时他认为<span class="hljs-keyword">BSD必然会一统天下，因为它是一个更稳定和更成熟的系统，其它操作系统难以与之竞争。</span><br><span class="hljs-keyword"></span><br>因此他的MINIX的重心集中在教育上。四名<span class="hljs-keyword">BSD开发者已经成立了一家公司销售BSD系统，他们甚至还有一个有趣的电话号码1-800-ITS-UNIX。</span><br><span class="hljs-keyword"></span><br>然而他们正因为这个电话号码而惹火上身。美国电话电报公司因电话号码而提起诉讼。<br><br>官司打了三年才解决。在此期间，<span class="hljs-keyword">BSD陷于停滞，而Linux则借此一飞冲天。</span><br><span class="hljs-keyword"></span><br>他的错误在于没有意识官司竟然持续了如此长的时间，以及<span class="hljs-keyword">BSD会因此受到削弱。如果美国电话电报公司没有起诉，Linux永远不会流行起来，BSD将统治世界。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>编程</category>
      
      <category>Linux</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>编程学习</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2024/01/06/test/"/>
    <url>/2024/01/06/test/</url>
    
    <content type="html"><![CDATA[<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.path.join(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world!&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>你好</p><p>你在干森么</p><table><thead><tr><th>—</th><th>—</th></tr></thead><tbody><tr><td>你好</td><td>你是</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
